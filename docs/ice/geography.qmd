---
Title: "ICE Facilities and Areas of Responsibility"
format: html
toc: false
---

# Field offices and areas of responsibility 


```{r}
#| echo: false
#| message: false
#| warning: false

library(tidyverse)
library(sf)
library(sfarrow)
library(leaflet.extras2)

aor_sf <- sfarrow::st_read_feather(
  "https://github.com/deportationdata/ice/raw/refs/heads/ice-offices/data/ice-aor-df.feather"
) |>
  rename(`Area of Responsibility` = `Area.of.Responsibility`)

aor_centroid_coords <-
  aor_sf |>
  st_transform(4326) |>
  st_point_on_surface() |>
  mutate(
    lng = st_coordinates(geometry)[, 1],
    lat = st_coordinates(geometry)[, 2]
  ) |>
  st_drop_geometry()

leaflet() |>
  addProviderTiles(providers$CartoDB.PositronNoLabels) |>
  addPolygons(
    data = aor_sf |> st_transform(4326),
    weight = 1,
    opacity = 1,
    color = gray(0.45),
    fill = NA
  ) |>
  addLabelOnlyMarkers(
    data = aor_centroid_coords,
    lng = ~lng,
    lat = ~lat,
    label = ~`Area of Responsibility`,
    labelOptions = labelOptions(
      noHide = TRUE,
      textOnly = TRUE,
      direction = "center",
      style = list(
        "color" = gray(0.35),
        "font-size" = "12px",
        # "font-weight" = "bold",
        "text-shadow" = "-1px -1px 0 #ffffff, 1px -1px 0 #ffffff, -1px 1px 0 #ffffff, 1px 1px 0 #ffffff"
      )
    ),
    group = "markers"
  ) |>
  setView(lng = -98.5795, lat = 39.8283, zoom = 4)
```


```{r}
library(reactable)

field_office_df <- arrow::read_feather(
  "https://github.com/deportationdata/ice/raw/refs/heads/ice-offices/data/ice-offices.feather"
)

suboffices_df <- 
  field_office_df |> 
  filter(office_category == "Sub-office") 

field_office_df <-
  # merge in sub-office df as a list column by main_office
  field_office_df |>
  filter(office_category == "Field office") |>
  left_join(
    suboffices_df |>
      transmute(main_office = str_remove(main_office, " Field Office"), sub_office = city, sub_office_area = area),
    by = c("city" = "main_office")
  ) |>
  group_by(city, state) |>
  # I want to collapse into one row per office name and have all the sub-office details in a list column
  summarise(
    office_category = first(office_category),
    office_type = first(office_type),
    address = first(address),
    city = first(city),
    state = first(state),
    zip = first(zip),
    area = first(area),
    sub_offices = list(tibble(sub_office, sub_office_area)),
    .groups = "drop"
  )

field_office_df |>
  filter(office_category == "Field office", office_type == "ERO") |>
  mutate(
    Address = glue::glue("{address}, {city}, {state} {zip}")
  ) |>
  select(Office = city, `Coverage area` = area, Address, sub_offices) |>
  reactable(
    pagination = FALSE,
    striped = TRUE,
    theme = reactableTheme(
      tableStyle = list(backgroundColor = "transparent"),
      headerStyle = list(backgroundColor = "transparent")
    ),
    details = function(index) {
      # Get the sub_offices data for this row
      sub_office_data <- field_office_df$sub_offices[[index]]
      
      # Filter out NA values
      sub_office_data <- sub_office_data |>
        filter(!is.na(sub_office))
      
      # If no sub-offices, return NULL (no details row)
      if (nrow(sub_office_data) == 0) {
        return(NULL)
      }
      
      # Create a reactable for the sub-offices
      sub_office_data |>
        select(
          `Sub-office` = sub_office,
          `Coverage area` = sub_office_area
        ) |>
        reactable(
          outlined = TRUE,
          highlight = TRUE,
          borderless = TRUE,
          striped = FALSE,
          columns = list(
            `Sub-office` = colDef(minWidth = 120),
            `Coverage area` = colDef(minWidth = 200)
          ),
          theme = reactableTheme(
            tableStyle = list(fontSize = "14px"),
            headerStyle = list(backgroundColor = "#f8f9fa")
          )
        )
    },
    columns = list(
      sub_offices = colDef(show = FALSE)  # Hide the sub_offices column
    )
  )
```

# ICE detention facilities

```{r}
detention_facility_df <- arrow::read_feather(
  "https://github.com/deportationdata/ice/raw/refs/heads/ice-offices/data/ice-detention-facilities.feather"
)

detention_facility_df <-
  detention_facility_df |>
  mutate(detention_facility = str_to_title(detention_facility))

leaflet() |>
  addProviderTiles(providers$CartoDB.PositronNoLabels) |>
  addCircleMarkers(
    data = detention_facility_df |>
      filter(!is.na(longitude)) |>
      st_as_sf(coords = c("longitude", "latitude"), crs = 4326),
    popup = ~ paste0(
      "<strong>",
      detention_facility,
      "</strong><br/>",
      "Stints: ",
      format(n_stints, big.mark = ","),
      "<br/>",
      "City: ",
      city,
      ", ",
      state
    ),
    radius = ~ sqrt(n_stints) / 50, # Scale the radius based on n_stints
    fillOpacity = 0.5,
    stroke = FALSE,
    weight = 1,
    # color = "white",
    # fillColor = "steelblue",
    labelOptions = labelOptions(
      noHide = TRUE,
      textOnly = TRUE,
      direction = "top",
      style = list(
        "color" = gray(0.35),
        "font-size" = "12px",
        "text-shadow" = "-1px -1px 0 #ffffff, 1px -1px 0 #ffffff, -1px 1px 0 #ffffff, 1px 1px 0 #ffffff"
      )
    )
  ) |>
  setView(lng = -98.5795, lat = 39.8283, zoom = 4)
```

::: {.column-page}

```{r}
library(reactable)


detention_facility_df |>
  select(-latitude, -longitude) |>
  janitor::clean_names("title") |>
  reactable(
    pagination = TRUE,
    filterable = TRUE,
    searchable = TRUE,
    striped = TRUE,
    # fullWidth = TRUE,
    theme = reactableTheme(
      tableStyle = list(backgroundColor = "transparent"),
      headerStyle = list(backgroundColor = "transparent")
    ),
    columns = list(
      `N Stints` = colDef(
        format = colFormat(separators = TRUE)
      ),
      `N Stints 2025` = colDef(
        format = colFormat(separators = TRUE)
      ),
      `N Individuals` = colDef(
        format = colFormat(separators = TRUE)
      ),
      `N Individuals 2025` = colDef(
        format = colFormat(separators = TRUE)
      ),
      `Proportion Male` = colDef(
        name = "% Male"
        format = colFormat(percent = TRUE, digits = 0)
      )
    )
  )
```

:::