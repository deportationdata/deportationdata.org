---
title: "ICE Offices and Areas of Responsibility"
format: html
toc: false
---

We provide tabular and spatial data on ICE field offices and their areas of responsibility (AOR) for use in conjunction with [individual-level ICE data](/data/ice.html). 

```{r}
#| echo: false
#| message: false
#| warning: false

library(reactable)
library(tidyverse)
library(sf)
library(sfarrow)
library(leaflet.extras2)

field_offices_sf <- sfarrow::st_read_feather(
  "https://github.com/deportationdata/ice/raw/refs/heads/main/data/ice-offices-shp.feather"
)

aor_sf <-
  sfarrow::st_read_feather(
    "https://github.com/deportationdata/ice/raw/refs/heads/main/data/ice-aor-shp.feather"
  ) |>
  rename(`Area of Responsibility` = `Area.of.Responsibility`)

aor_centroid_coords <-
  aor_sf |>
  st_transform(4326) |>
  st_point_on_surface() |>
  mutate(
    lng = st_coordinates(geometry)[, 1],
    lat = st_coordinates(geometry)[, 2]
  ) |>
  st_drop_geometry()

leaflet() |>
  addProviderTiles(providers$CartoDB.PositronNoLabels) |>
  addPolygons(
    data = aor_sf |> st_transform(4326),
    weight = 1,
    opacity = 1,
    color = gray(0.45),
    fill = NA,
    group = "ICE areas of responsibility"
  ) |>
  addLayersControl(
    overlayGroups = c(
      "ICE ERO areas of responsibility",
      "ICE ERO field offices",
      "ICE ERO check-in offices (sub offices)"
    ),
    position = "bottomleft",
    options = layersControlOptions(
      collapsed = FALSE
    )
  ) |>
  addLabelOnlyMarkers(
    data = aor_centroid_coords |> filter(!is.na(lng)),
    lng = ~lng,
    lat = ~lat,
    label = ~`Area of Responsibility`,
    labelOptions = labelOptions(
      noHide = TRUE,
      textOnly = TRUE,
      direction = "center",
      style = list(
        "color" = gray(0.35),
        "font-size" = "12px",
        # "font-weight" = "bold",
        "text-shadow" = "-1px -1px 0 #ffffff, 1px -1px 0 #ffffff, -1px 1px 0 #ffffff, 1px 1px 0 #ffffff"
      )
    ),
    group = "ICE ERO areas of responsibility"
  ) |>
  addMarkers(
    data = field_offices_sf |> filter(sub_office == FALSE, agency == "ERO"),
    group = "ICE ERO field offices",
    popup = ~ glue::glue(
      "<b>{office_name}</b><br/>",
      "<b>Address:</b> {address}, {city}, {state} {zip}<br/>",
      "<b>Coverage Area:</b> {area}<br/>"
    ),
    # make markers half size
    icon = makeIcon(
      iconUrl = "https://unpkg.com/leaflet@1.9.4/dist/images/marker-icon.png",
      shadowUrl = "https://unpkg.com/leaflet@1.9.4/dist/images/marker-shadow.png",
      iconWidth = 15, # Half the default size (25)
      iconHeight = 25, # Half the default size (41)
      iconAnchorX = 7, # Half of iconWidth
      iconAnchorY = 25, # Bottom of icon
      shadowWidth = 20, # Proportionally smaller shadow
      shadowHeight = 20,
      shadowAnchorX = 5,
      shadowAnchorY = 20
    )
  ) |>
  addMarkers(
    data = field_offices_sf |>
      filter(sub_office == TRUE, agency == "ERO"),
    group = "ICE ERO check-in offices (sub offices)",
    popup = ~ glue::glue(
      "<b>{office_name}</b><br/>",
      "<b>Address:</b> {address}, {city}, {state} {zip}<br/>",
      "<b>Coverage Area:</b> {area}<br/>"
    ),
    # make markers half size with custom color
    icon = makeIcon(
      iconUrl = "https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-red.png",
      shadowUrl = "https://unpkg.com/leaflet@1.9.4/dist/images/marker-shadow.png",
      iconWidth = 15, # Half the default size (25)
      iconHeight = 25, # Half the default size (41)
      iconAnchorX = 7, # Half of iconWidth
      iconAnchorY = 25, # Bottom of icon
      shadowWidth = 20, # Proportionally smaller shadow
      shadowHeight = 20,
      shadowAnchorX = 5,
      shadowAnchorY = 20
    )
  ) |>
  hideGroup("ICE ERO check-in offices (sub offices)") |>
  setView(lng = -96.5795, lat = 37.8283, zoom = 4)
```

<p></p>

Map includes two layers:

- **ICE Enforcement and Removal Operations (ERO) field offices**: Locations of ICE ERO field offices.
- **ICE ERO check-in offices (sub-offices)**: Locations of ICE ERO check-in offices, where noncitizens in removal proceedings may be required to report periodically. These are sometimes known as the sub-offices of the main ICE ERO field offices.
- **ICE areas of responsibility (AORs)**: Geographic region managed by each ICE field office. The AOR map was originally created by the [Center for Human Rights at the University of Washington](https://jsis.washington.edu/humanrights).

<span style="display:block; height:10px;"></span>

## ICE Enforcement and Removal Operations field offices

We provide a table of ICE ERO field offices, their addresses, and their areas of responsibility. Some ICE ERO field offices have sub-offices (check-in locations) that serve specific areas within the main office's area of responsibility. <i class="bi bi-caret-right-fill"></i> expands the field office row to show its sub-offices and their coverage areas.

```{r}
sub_offices_sf <-
  field_offices_sf |>
  filter(sub_office == TRUE)

field_offices_sf <-
  # merge in sub-office df as a list column by main_office
  field_offices_sf |>
  filter(sub_office == FALSE, agency == "ERO") |>
  left_join(
    sub_offices_sf |>
      st_drop_geometry() |>
      transmute(
        field_office_name,
        sub_office_name = office_name,
        sub_office_area = area,
        sub_office_address = glue::glue("{address}, {city}, {state} {zip}")
      ),
    by = c("office_name" = "field_office_name")
  ) |>
  mutate(address_full = glue::glue("{address}, {city}, {state} {zip}")) |>
  group_by(office_name) |>
  # I want to collapse into one row per office name and have all the sub-office details in a list column
  summarise(
    address_full = first(address_full),
    area = first(area),
    sub_offices = list(tibble(
      sub_office_name,
      sub_office_area,
      sub_office_address
    )),
    .groups = "drop"
  )

field_offices_sf |>
  st_drop_geometry() |>
  select(
    Office = office_name,
    `Coverage area` = area,
    `Address` = address_full,
    sub_offices
  ) |>
  reactable(
    pagination = TRUE,
    defaultPageSize = 5,
    searchable = TRUE,
    theme = reactableTheme(
      tableStyle = list(backgroundColor = "transparent"),
      headerStyle = list(backgroundColor = "transparent"),
      backgroundColor = "#F4F6F7"
    ),
    details = function(index) {
      # Get the sub_offices data for this row
      sub_office_data <- field_offices_sf$sub_offices[[index]]

      # Filter out NA values
      sub_office_data <- sub_office_data |>
        filter(!is.na(sub_office_name))

      # If no sub-offices, return NULL (no details row)
      if (nrow(sub_office_data) == 0) {
        return(NULL)
      }

      # Create a reactable for the sub-offices
      sub_office_data |>
        select(
          `Sub-office` = sub_office_name,
          `Coverage area` = sub_office_area,
          `Address` = sub_office_address
        ) |>
        reactable(
          outlined = TRUE,
          highlight = TRUE,
          borderless = TRUE,
          striped = FALSE,
          pagination = FALSE,
          columns = list(
            `Sub-office` = colDef(minWidth = 120),
            `Coverage area` = colDef(minWidth = 200),
            `Address` = colDef(minWidth = 200)
          ),
          theme = reactableTheme(
            tableStyle = list(fontSize = "14px"),
            headerStyle = list(backgroundColor = "#f8f9fa"),
            backgroundColor = "#F4F6F7"
          )
        )
    },
    columns = list(
      sub_offices = colDef(show = FALSE) # Hide the sub_offices column
    )
  )
```

<span style="display:block; height:10px;"></span>

*Note:* we do not include the headquarters (HQ) office used in ICE's individual-level data in this table, because it is not included in ICE's [list of field offices](https://www.ice.gov/contact/field-offices). When an arrest or removal is attributed to "HQ" in ICE's data, we do not know if this is informative about where the arrest took place.

## Download data

Download the data used to create the map and table above in multiple formats, including tabular data and spatial data that represents the location of each office or area. 

```{r}
library(reactable)
download_df <-
  tribble(
    ~name,
    ~description,
    ~last_updated,
    ~download,
    "ICE office location dataset",
    "Field offices for each ICE agency (ERO, HSI, JIATF, LESC, OPE, OPLA, and OPR) and ERO check-in offices (sub-offices)",
    as.Date("2025-09-30"),
    list(
      list(
        "https://github.com/deportationdata/ice/raw/refs/heads/main/data/ice-offices.xlsx",
        "",
        "xlsx"
      ),
      list(
        "https://github.com/deportationdata/ice/raw/refs/heads/main/data/ice-offices.feather",
        "",
        "feather"
      ),
      list(
        "https://github.com/deportationdata/ice/raw/refs/heads/main/data/ice-offices.dta",
        "",
        "dta"
      ),
      list(
        "https://github.com/deportationdata/ice/raw/refs/heads/main/data/ice-offices.sav",
        "",
        "sav"
      )
    ),
    "ICE office location shapefile",
    "Field offices for each ICE agency (ERO, HSI, JIATF, LESC, OPE, OPLA, and OPR) and ERO check-in offices (sub-offices). Provided as a shapefile with point geometries, in both a ZIP file with the .shp and associated files, and as a Feather file with simple feature geometries.",
    as.Date("2025-09-30"),
    list(
      list(
        "https://github.com/deportationdata/ice/raw/refs/heads/main/data/ice-offices.zip",
        "",
        "shp"
      ),
      list(
        "https://github.com/deportationdata/ice/raw/refs/heads/main/data/ice-offices.feather",
        "",
        "feather"
      )
    ),
    "ICE ERO areas of responsibility shapefile",
    "Geographic areas of responsibility for each ICE ERO field office. Provided as a shapefile with polygon geometries, in both a ZIP file with the .shp and associated files, and as a Feather file with simple feature geometries.",
    as.Date("2025-09-30"),
    list(
      list(
        "https://github.com/deportationdata/ice/raw/refs/heads/main/data/ice-aor-shp.zip",
        "",
        "shp"
      ),
      list(
        "https://github.com/deportationdata/ice/raw/refs/heads/main/data/ice-aor-shp.feather",
        "",
        "feather"
      )
    )
  )

reactable(
  download_df,
  pagination = FALSE,
  theme = reactableTheme(
    tableStyle = list(backgroundColor = "transparent"),
    headerStyle = list(backgroundColor = "transparent"),
    backgroundColor = "#F4F6F7"
  ),
  details = function(index) {
    # Get the description for this row
    description_text <- download_df[index, ]$description

    # Return HTML with the description
    htmltools::div(
      style = "padding: 16px; background-color: #f8f9fa; border-left: 3px solid #007bff;",
      htmltools::strong("Description: "),
      description_text
    )
  },
  columns = list(
    name = colDef(
      name = "Dataset",
      minWidth = 200
    ),
    description = colDef(show = FALSE), # Hide the description column
    last_updated = colDef(
      name = "Last updated",
      format = colFormat(date = TRUE)
    ),
    download = colDef(
      name = "Download",
      minWidth = 85,
      html = TRUE,
      header = function(value) {
        htmltools::tags$span(
          `data-bs-toggle` = "tooltip",
          `data-bs-placement` = "top",
          title = "Download data cleaned and processed by the Deportation Data Project",
          "Download"
        )
      },
      cell = function(value) {
        if (is.null(value) || length(value) == 0 || is.na(value[[1]][[1]])) {
          return("&ndash;") # en dash
        }

        links <- map(
          value,
          ~ {
            paste0(
              "<a href='",
              .x[[1]],
              "'>",
              "<img src='/img/",
              .x[[3]],
              ".svg' width=25 height=25 alt='",
              .x[[3]],
              "'>",
              "</a>"
            )
          }
        )

        paste(links, collapse = " ")
      }
    )
  )
)
```