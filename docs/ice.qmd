---
title: "ICE: Immigration and Customs Enforcement"
---

```{r}
library(reactable)
library(tidyverse)

library(googlesheets4)
gs4_deauth()

# Define the URL of the Google Sheets document
url <- "https://docs.google.com/spreadsheets/d/1LD4WSEHNRwnTxIY6I9eau2VOqonOL0_MOhnIwknyzHQ/edit?gid=0#gid=0"
# Read the data from the Google Sheets document
tables <- read_sheet(url, sheet = "tables")
fields <- read_sheet(url, sheet = "fields_edited")
values <- read_sheet(url, sheet = "values", col_types = "c")
columns_recent <- read_sheet(url, sheet = "columns_recent")
missingness_df <- read_rds("../missingness_by_field.rds")
```

## Tables 

```{r}
# Give every <tr> a unique id
id_cell <- function(value) {
  htmltools::tags$span(id = paste0("row-", value), value)
}

reactable(
    tables |> 
       select(Name = `Descriptive name`, Description) |> arrange(Name),
    columns = list(
    Name = colDef(minWidth = 100, cell = id_cell),
    Description = colDef(minWidth = 200)), # set id anchor for linking
  pagination = FALSE,
  striped = TRUE,
  fullWidth = TRUE
)
```

## Fields (variables)

```{r}
check_def <- colDef(
  width = 100,
  align = "center",
  style = list(whiteSpace = "nowrap"),
  html  = TRUE,     # allow htmltools tags
  cell  = function(value) {
    if (identical(value, "Y")) {
      htmltools::tags$div(
        style = "display: flex; justify-content: center; align-items: center;",
        htmltools::tags$i(
          class = "fas fa-check",
          style = "font-size: 1.2em; color: green;"
        )
      )
    } else if (identical(value, "N")) {
      ""
    } else if (!is.na(value)) {
     value
    } else if (is.na(value)) {
      "—"
    }
  }
)

fields_tbl <- fields |> 
  mutate(
    name_merge = if_else(is.na(column_names), name_merge_recent, column_names) |>
      str_replace_all(" yes no", " (Yes/No)") |> 
      str_replace_all(" Yes No", " (Yes/no)")
  ) |> 
  select(Name = name_merge, Description = description, in_recent)

values_tbl <-
  values |> 
  distinct(Variable, Value, `Value label`) |> 
  unnest(Value) |> 
  filter(!is.na(Value)) 

reactable(
  fields_tbl |> select(-in_recent), 
  pagination = FALSE,
  striped    = TRUE,
  searchable = TRUE,
  filterable = FALSE,
  columns = list(
    Name = colDef(minWidth = 100),
    Description = colDef(minWidth = 200, sortable = FALSE)
  ),
  details = function(index) {
  var_name <- fields_tbl$Name[index]

  val_tbl <- values_tbl |>
    filter(Variable == var_name) |>
    select(Value, `Value label`) |>
    arrange(Value)

  missgn_tbl <- 
    missingness_df |>
    filter(column_names == var_name) |>
    select(-column_names) |> 
    uncount(2) |> 
    # set row names to be c("In latest data", "% missing in latest")
    mutate(
      rownames = if_else(row_number() == 1, "In latest data?", "% missing"),
      across(where(is.numeric), ~as.character(round(.*100))),
      across(c(everything(), -rownames), ~case_when(
        row_number() == 1 & is.na(.) ~ "N",
        row_number() == 1 & !is.na(.) ~ "Y",
        row_number() == 2 & is.na(.) ~ NA_character_,
        TRUE ~ .
      ))
    ) |> 
      relocate(rownames)

  # collect the pieces we want to show
  pieces <- list()

  # Determine if this is an odd or even row (1-indexed)
  row_color <- if (index %% 2 == 0) "white" else "#f6f8fa"

  if (nrow(missgn_tbl) > 0) {
    pieces <- c(pieces,
      list(
        htmltools::tags$h4(
          style = "margin-top: 0rem; margin-bottom: 0.5rem;",
          "Data availability and missingness"
        ),
        reactable(
          missgn_tbl, 
          # outlined = TRUE, 
          sortable = FALSE,
          # striped = TRUE,
          fullWidth = FALSE,
          # make the table transparent
          theme = reactableTheme(
            backgroundColor = "transparent",
            borderColor = "#ddd",
            headerStyle = list(backgroundColor = "transparent"),
            # add horizontal lines only in between rows
            rowStyle = list(
              borderBottom = "1px solid #ddd",
              backgroundColor = "transparent"
            ),
            # add vertical spacing at bottom
            footerStyle = list(paddingBottom = "2rem")
          ),
          columns = list(
            # set columns to be check if "Y"
            rownames = colDef(
              name = "",
              style = list(whiteSpace = "nowrap"),
              width = 125,
              align = "left"
            ),
            `Admin Arrests` = check_def,
            Detainers = check_def,
            Encounters = check_def,
            Detentions = check_def,
            Removals = check_def
          )
        )
      )
    )
  }

  # drop the Value-label column if it’s all NA
  if (all(is.na(val_tbl$`Value label`))) {
    val_tbl$`Value label` <- NULL
  }

  if (nrow(val_tbl) > 0) {
    col_defs <- purrr::set_names(
      lapply(names(val_tbl), \(col)
        colDef(name = col, minWidth = 150)
      ),
      names(val_tbl)
    )

    pieces <- c(pieces,
      list(
        htmltools::tags$h4(
          style = glue::glue("margin-bottom: 1rem;"),
          "Values and value labels"
        ),
        reactable(
          val_tbl,
          # outlined = TRUE,
          compact  = TRUE,
          # striped = TRUE,
          theme = reactableTheme(
            backgroundColor = "transparent",
            borderColor = "#ddd",
            headerStyle = list(backgroundColor = "transparent"),
            # add horizontal lines only in between rows
            rowStyle = list(
              borderBottom = "1px solid #ddd",
              backgroundColor = "transparent"
            )
          ),
          defaultPageSize = 25,
          columns  = col_defs
        )
      )
    )
  }

  # nothing to show for this row
  if (length(pieces) == 0) return(NULL)

  htmltools::div(style = paste0("padding: 1rem; margin-bottom: 1.5rem; background-color: ", row_color, ";"), htmltools::tagList(pieces))
}

)
```