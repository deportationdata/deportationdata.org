---
title: "ICE data documentation"
author:
  - name: Deportation Data Project
    url: "https://deportationdata.org"
  - name: "University of Washington Center for Human Rights"
    url: "https://jsis.washington.edu/humanrights"
---

```{r}
library(reactable)
library(tidyverse)

library(googlesheets4)
gs4_deauth()

# Define the URL of the Google Sheets document
url <- "https://docs.google.com/spreadsheets/d/1LD4WSEHNRwnTxIY6I9eau2VOqonOL0_MOhnIwknyzHQ/edit?gid=0#gid=0"
# Read the data from the Google Sheets document
tables <- read_sheet(url, sheet = "tables")
fields <- read_sheet(url, sheet = "fields_edited")
values <- read_sheet(url, sheet = "values", col_types = "c")
missingness_df <- read_rds("../missingness_by_field.rds")
```

## Codebook

We provide a codebook for the [main ICE data tables and fields](/data/ice.html). The codebook is a work in progress; there are many things we do not understand in the data, and some of our educated guesses here may be mistaken. We will continue to update the codebook as we learn more, and we welcome feedback and corrections.

::: {.callout-tip collapse="true" appearance="simple"}

## Frequently asked data questions

<div style="margin-top: 0.5em;">

**What ICE data has the Deportation Data Project posted?**

We have posted individual-level data on: arrests, also called apprehensions; detainers, which are requests that ICE makes to local jails and prisons to hold individuals for transfer to ICE custody; detentions, which are records of individuals held in ICE custody; encounters, which are records of individuals who ICE either encountered in person or searched for electronically; and removals, which are records of deportatations conducted by ICE.

**What is individual-level data?**

We seek and post data that is at the individual level. That means the datasets contain a row for each individual immigration enforcement action (such as arrest or removal). This allows the user to conduct analysis--for example, to count the number of arrests that occurred in a given area of responsibility. We do not conduct analysis ourselves (although we hope to have the capacity to do so in the future). That means that we do not provide counts, reports, or summary statistics. Instead, if you see counts or summary statistics attributed to the Deportation Data Project, that means someone downloaded data from our website and used it to conduct analysis.

**Where does the ICE data come from?**

The data comes from ICE itself in response to FOIA requests. In most cases, we provide the raw data ICE provided without modification. We note any time we have modified the data, such as to make it possible to open.

**When will you update these datasets?**

We promptly post data that we receive from ICE, but ICE has not agreed to release these datasets on any schedule, so it is impossible to predict when, or at what intervals, we will receive updates. We are actively seeking updates.

**How can I access the data?**

You can access the data in the tables below. Each table has a "Download" column with a link to download the data as an Excel file. The most recent release is also available as a ZIP file with all of the tables together. You can open them directly in Microsoft Excel or another spreadsheet program or read them into a statistical software such as R or Stata.

**Can I filter arrests data to my state, city, or neighborhood?**

Yes, but imperfectly. Three variables (columns) may be useful: "Area of Responsibility," "Landmark," and "State." Each is useful, but also incomplete. The state variable is accurate, but sometimes missing. The Area of Responsibility variable, which represents the coverage area of an ICE field office, is geographically coarse; some areas encompass very large regions. ICE provides [some information](https://www.ice.gov/contact/field-offices?office=16) on the coverage areas. The Landmark refers to a place near the arrest and is sometimes the most geographically-specific, but [it is inconsistently used](https://uwchr.github.io/ice-enforce/landmarks.html).

**I saw your warning about the data in the removals table. How can I get the best picture of deportations?**

We urge extreme caution using the removals table for the early June and late June 2025 releases. The late June release includes significantly more records, for the same date range, than the removals dataset in the previous release (early June). We therefore urge users not to rely on the previous, early June, release of the removals table, and to exercise extreme caution in using the removals table at all. In both releases, removals from FY2024 were far below the number reported by ICE’s annual report, and we therefore have released only 2025 data, and have doubts about the reliability of the removals table overall. The obvious problems do not appear in 2025, and we have posted the table starting in January 2025, but we remain concerned that the table may not include all relevant records, and that associated fields in the other tables, such as the departure date, may also create an incomplete picture of removals. These concerns lead us to advise caution when performing any analysis of removals. The most complete way to count deportations (removals) is to add up (1) people with departed dates in the relevant period from the arrests, detentions, detainers, and encounters tables; (2) people with “removed” as their detention release reason in this period in the detentions table; and (3) people in the removals table. To focus on removals after ICE arrest and detention, filter to the “Stay Release Reason” of “Removed” in the detentions table (while being careful not to count people more than once, since many people have information across more than one row in the detentions table–see our codebook for more details). 

**How can I identify courtroom arrests in the data?**

Unfortunately we do not know of a good way to identify arrests at courthouses. 

**How can I identify raids in communities in the data, as opposed to arrests at check-ins or a jail or prison?**

It is not possible to fully isolate arrests that take place in communities (as opposed to within jails or prisons, for example). However, there are two indicators that may be useful: in the arrests table when "Apprehension Method" is "Located" or "Non-Custodial Arrest" we think that these records are more likely to indicate arrests in the community.

**How can I tell whether detainers are honored by local and state jails and prisons?**

There does not appear to be any way to determine from these data whether a jail or prison is holding individuals for up to 48 hours in response to a detainer request. However, there are ways to determine whether an individual is booked into ICE detention following a detainer request. The "Detainer Lift Reason" field in the detainers table includes values that likely represent detainer refusals ("Detainer Declined by LEA") and some that may represent accepting detainers ("Booked into Detention"). However, that field is often missing. If the field is missing, it may mean that the person remains in criminal custody, the detainer was not honored, or that ICE has not yet updated the record to indicate whether it was honored. A second way to confirm whether the individual was transferred to ICE custody following a detainer request is to join the detainers table to the detentions table by unique ID. If the unique ID in the detainers table does not appear in the detentions table, it is possible that the detainer was not honored. Note, however, that the individual may still be in criminal custody. If the unique ID does appear in the detentions table, that means the individual was booked into ICE custody following a detainer request.

**Do these data include all immigration arrests, detentions, and removals by the US government?**

No, they only include actions by ICE Enforcement and Removal Operations (ERO). ICE ERO is generally responsible for civil immigration arrests in the interior of the United States, away from international borders (Austin Kocher’s [Substack discusses](https://austinkocher.substack.com/p/a-close-look-at-ice-arrest-data-from) the ICE arrests data in detail). Customs and Border Protection (CBP) conducts arrests and detentions at or near the border. Some people arrested by CBP are transferred for detention and removal by ICE. CBP also refuses entry and removes people deemed inadmissible at the border. We post [data from CBP](https://deportationdata.org/data/cbp.html) on arrests (encounters) and people deemed inadmissible at the border. CBP has not released data as recently as ICE has. 

**How can I identify removals to third countries?**

Every table has a column for "Departed Country," which indicates where individuals were removed to. To identify third-country removals in which a noncitizen was deported to a country other than their country of citizenship, compare those countries to the "Citizenship Country" and/or the "Birth Country" column. The "Citizenship Country" may not include all nationalities in the case of dual citizenship and, as with all data, errors are possible.

**It seems like there are multiple ways to count deportations, and the numbers differ depending on which one I use. Which one is right?**

There are two fields in every table that describe removals: "Departed Date" and "Departure Country." To the best of our knowledge, these are accurate (but our knowledge is limited). Counting removals based on nonmissing values of departed date, however, will yield different answers, depending on whether they are counted in the apprehensions, encounters, detainers, or detentions tables. Each represents a different population. For example, the number of people with nonmissing departed dates in apprehensions represents the number of people arrested by ICE ERO who were later deported (removed), whereas the number of detainers with nonmissing departed dates represents the number of people who were issued detainers who were later deported. Not all arrests lead to deportations, and not all detainers are honored or lead to removals if they are. Finally, some removals may take place without corresponding records in any of the other four tables; these removals would only be included in the removals table, which may or may not be comprehensive.

**Why would data for the same individual change between releases?**

ICE appears to update records retroactively in a relatively small number of cases, including by changing the arrests, encounters, detainers, and detentions tables when a removal takes place. This may result in slightly different patterns in overlapping periods of two data releases. We do not know whether there is a schedule or systematic procedure dictating when these updates occur.

**Why are there many rows per person in the detention table?**

Each row in the detentions table represents time in a specific detention facility from book-in to book-out. A person arrested by ICE might be transferred to multiple facilities during their detention, represented in multiple rows. Overall, ICE refers to the whole detention period (from book-in to the first detention to book-out from the last detention center) as a “stay.” A stay often includes multiple book-ins to different detention centers,  and one person (identified anonymously by unique ID) can have multiple stays (if released from detention and later detained again). See our [ICE codebook](https://deportationdata.org/docs/ice.html) for further explanation of the detentions data.

</div>

:::


### Tables 

We describe the main ICE data tables below.

```{r}
# Give every <tr> a unique id
id_cell <- function(value) {
  htmltools::tags$span(id = paste0("row-", value), value)
}

reactable(
    tables |> select(Name = `Descriptive name`, Description) |> arrange(Name),
    columns = list(
    Name = colDef(minWidth = 100, cell = id_cell),
    Description = colDef(minWidth = 200, sortable = FALSE)), # set id anchor for linking
  pagination = FALSE,
  striped = TRUE,
  fullWidth = TRUE,
  theme = reactableTheme(
    # clear the table itself
    tableStyle  = list(backgroundColor = "transparent"),
    # keep the cells transparent too
    headerStyle = list(backgroundColor = "transparent")
  )
)
```

### Fields (variables) in latest data release

We describe the fields (a.k.a. variables or columns) in the latest ICE data release below. The table includes the name of each field, a description, and the type of data in the field (e.g., string, numeric, date). Expanding a row will show an indicator for whether the field is available in each table and the proportion missing. 

```{r}
check_def <- colDef(
  width = 130,
  align = "center",
  style = list(whiteSpace = "nowrap"),
  html  = TRUE,     # allow htmltools tags
  cell  = function(value) {
    if (identical(value, "Y")) {
      htmltools::tags$div(
        style = "display: flex; justify-content: center; align-items: center;",
        htmltools::tags$i(
          class = "fas fa-check",
          style = "font-size: 1.2em; color: green;"
        )
      )
    } else if (identical(value, "R")) {
      htmltools::tags$div(
        style = "display: flex; justify-content: center; align-items: center;",
        htmltools::tags$i(
          class = "fas fa-exclamation-triangle",
          style = "font-size: 1.2em; color: orange;"
        )
      )
    } else if (identical(value, "N")) {
      ""
    } else if (!is.na(value)) {
     value
    } else if (is.na(value)) {
      "—"
    }
  }
)

fields_tbl <- 
  fields |> 
  filter(!name_in_foia_request %in% c("felon", "msc_conviction_date")) |> 
  select(-`Admin Arrests`, -Detainers, -Encounters, -Detentions, -Removals) |>
  select(-in_recent) |> 
  mutate(
    name_merge = if_else(is.na(column_names), name_merge_recent, column_names)
   ) |>
   # recode from "Alien File Number" to "Anonymized Identifier"; "Case ID" to "EID Case ID"; "Subject ID" to "EID Subject ID"
  mutate(
    name_merge = str_replace_all(name_merge, "Alien File Number", "Anonymized Identifier"),
    name_merge = str_replace_all(name_merge, "Case ID", "EID Case ID"),
    name_merge = str_replace_all(name_merge, "Subject ID", "EID Subject ID")
  ) |> 
   filter(!is.na(name_merge)) |> 
   left_join(missingness_df |> mutate(in_recent = 1), by = c("name_merge" = "field")) |> 
   mutate(
     in_recent = if_else(is.na(in_recent), 0, in_recent)
   ) |> 
   rename(Name = name_merge, Description = description, Type = type)

fields_tbl_redacted <- 
  fields_tbl |>
    select(Name, contains("redacted") | contains("missing")) |> 
    pivot_longer(
      cols = c(everything(), -Name),                     
      names_to   = c("type", ".value"),        
      names_sep  = "_",                        
      values_drop_na = FALSE                   
    ) |> 
      filter(type == "redacted") |> 
      select(-type) |>
      # pivot longer but keep Name
    pivot_longer(cols = c(everything(), -Name), names_to = "Table", values_to = "redaction_value") |> 
    group_by(Name) |> 
    summarise(
      all_redacted = !all(is.na(redaction_value)) && all(redaction_value[!is.na(redaction_value)] == 1),
      any_redacted = any(redaction_value == 1, na.rm = TRUE),
      .groups = "drop"
    ) 

fields_tbl <-
  fields_tbl |>
  left_join(fields_tbl_redacted, by = "Name") |> 
  filter(all_redacted == FALSE) |> 
  select(-all_redacted, -any_redacted)

values_tbl <-
  values |> 
  distinct(Variable, Value, `Value label`) |> 
  unnest(Value) |> 
  filter(!is.na(Value)) 

reactable(
  fields_tbl |> 
    filter(in_recent == 1) |> 
    select(Name, Description, Type) |> 
    mutate(Name = Name |> 
       str_replace_all(" yes no", " (Yes/No)") |> 
       str_replace_all(" Yes No", " (Yes/no)")) |> 
    arrange(Name), 
  pagination = FALSE,
  striped    = TRUE,
  searchable = TRUE,
  filterable = FALSE,
  theme = reactableTheme(
    # clear the table itself
    tableStyle  = list(backgroundColor = "transparent"),
    # keep the cells transparent too
    headerStyle = list(backgroundColor = "transparent")
  ),
  columns = list(
    Name = colDef(minWidth = 100),
    Description = colDef(minWidth = 200, sortable = FALSE),
    Type = colDef(minWidth = 65)
  ),
  details = function(index) {
  var_name <- fields_tbl |> filter(in_recent == 1) |> arrange(Name) |> slice(index) |> pull(Name)

  val_tbl <- values_tbl |>
    filter(Variable == var_name) |>
    select(Value, `Value label`) |>
    arrange(Value)

  missgn_tbl <- 
    fields_tbl |>
    filter(Name == var_name) |>
    select(contains("redacted") | contains("missing")) |> 
    pivot_longer(
      cols = everything(),                     
      names_to   = c("type", ".value"),        
      names_sep  = "_",                        
      values_drop_na = FALSE                   
    ) |> 
    select(-type) |>
    # set row names to be c("In latest data", "% missing in latest")
    mutate(
      rownames = if_else(row_number() == 1, "In latest data?", "% missing"),
      across(where(is.numeric), ~as.character(round(.*100))),
      across(c(everything(), -rownames), ~case_when(
        row_number() == 1 & is.na(.) ~ "N",
        row_number() == 1 & !is.na(.) & . == 0 ~ "Y",
        row_number() == 1 & !is.na(.) & . == 1 ~ "R",
        row_number() == 2 & is.na(.) ~ NA_character_,
        TRUE ~ .
      ))
    ) |> 
      relocate(rownames)

  # collect the pieces we want to show
  pieces <- list()

  # Determine if this is an odd or even row (1-indexed)
  row_color <- if (index %% 2 == 0) "white" else "#F7F7F7"

  if (nrow(missgn_tbl) > 0) {
    pieces <- c(pieces,
      list(
        htmltools::tags$h4(
          style = "margin-top: 0rem; margin-bottom: 0.5rem;",
          "Data availability and missingness"
        ),
        reactable(
          missgn_tbl, 
          # outlined = TRUE, 
          sortable = FALSE,
          # striped = TRUE,
          fullWidth = FALSE,
          # make the table transparent
          theme = reactableTheme(
            backgroundColor = row_color,
            borderColor = "#ddd",
            headerStyle = list(backgroundColor = row_color),
            # add horizontal lines only in between rows
            rowStyle = list(
              borderBottom = "1px solid #ddd",
              backgroundColor = row_color
            ),
            # add vertical spacing at bottom
            footerStyle = list(paddingBottom = "2rem")
          ),
          columns = list(
            # set columns to be check if "Y"
            rownames = colDef(
              name = "",
              style = list(whiteSpace = "nowrap"),
              width = 125,
              align = "left"
            ),
            `Admin Arrests` = check_def,
            Detainers = check_def,
            Encounters = check_def,
            Detentions = check_def,
            Removals = check_def
          )
        )
      )
    )
  }

  # drop the Value-label column if it’s all NA
  if (all(is.na(val_tbl$`Value label`))) {
    val_tbl$`Value label` <- NULL
  }

  if (nrow(val_tbl) > 0) {
    col_defs <- purrr::set_names(
      lapply(names(val_tbl), \(col)
        colDef(name = col, minWidth = 150)
      ),
      names(val_tbl)
    )

    # pieces <- c(pieces,
    #   list(
    #     htmltools::tags$h4(
    #       style = glue::glue("margin-bottom: 1rem;"),
    #       "Values and value labels"
    #     ),
    #     reactable(
    #       val_tbl,
    #       # outlined = TRUE,
    #       compact  = TRUE,
    #       # striped = TRUE,
    #       theme = reactableTheme(
    #         backgroundColor = row_color,
    #         borderColor = "#ddd",
    #         headerStyle = list(backgroundColor = row_color),
    #         # add horizontal lines only in between rows
    #         rowStyle = list(
    #           borderBottom = "1px solid #ddd",
    #           backgroundColor = row_color
    #         )
    #       ),
    #       defaultPageSize = 25,
    #       columns  = col_defs
    #     )
    #   )
    # )
  }

  # nothing to show for this row
  if (length(pieces) == 0) return(NULL)

  htmltools::div(style = paste0("padding: 1rem; margin-bottom: 1.5rem; background-color: ", row_color, ";"), htmltools::tagList(pieces))
}

)
```

### Fields (variables) in previous data releases

We also provide a table of fields (a.k.a. variables or columns) that were available in previous ICE data releases but are not included in the most recent data. This table includes the name of each field, a description, and the type of data in the field (e.g., string, numeric, date). 

```{r}
reactable(
  fields_tbl |> filter(in_recent == 0) |> 
    select(Name, Description, Type) |> 
    mutate(Name = Name |> 
       str_replace_all(" yes no", " (Yes/No)") |> 
       str_replace_all(" Yes No", " (Yes/no)")) |> 
    arrange(Name), 
  pagination = FALSE,
  striped    = TRUE,
  searchable = TRUE,
  filterable = FALSE,
  theme = reactableTheme(
    # clear the table itself
    tableStyle  = list(backgroundColor = "transparent"),
    # keep the cells transparent too
    headerStyle = list(backgroundColor = "transparent")
  ),
  columns = list(
    Name = colDef(minWidth = 100),
    Description = colDef(minWidth = 200, sortable = FALSE),
    Type = colDef(minWidth = 65)
  )

)
```
