---
title: "ICE: Immigration and Customs Enforcement"
---

```{r}
library(reactable)
library(tidyverse)

library(googlesheets4)
gs4_deauth()

# Define the URL of the Google Sheets document
url <- "https://docs.google.com/spreadsheets/d/1LD4WSEHNRwnTxIY6I9eau2VOqonOL0_MOhnIwknyzHQ/edit?gid=0#gid=0"
# Read the data from the Google Sheets document
tables <- read_sheet(url, sheet = "tables")
fields <- read_sheet(url, sheet = "fields_edited")
values <- read_sheet(url, sheet = "values")
columns_recent <- read_sheet(url, sheet = "columns_recent")
```

## Tables 

```{r}
#| column: page

# Give every <tr> a unique id
id_cell <- function(value) {
  htmltools::tags$span(id = paste0("row-", value), value)
}

reactable(
    tables |> 
       select(Name = `Descriptive name`, Description) |> arrange(Name),
    columns = list(
    Name = colDef(minWidth = 100, cell = id_cell),
    Description = colDef(minWidth = 200)), # set id anchor for linking
  # searchable = TRUE,
  # filterable = TRUE,
  pagination = FALSE,
  striped = TRUE,
  fullWidth = FALSE
) |>
  htmlwidgets::onRender("
    function(el) {
      // If there's a hash on load or after clicking a link, scroll smoothly
      function scrollToHash() {
        if (!location.hash) return;
        const target = el.querySelector(location.hash);
        if (target) target.scrollIntoView({behavior: 'smooth', block: 'center'});
      }
      scrollToHash();
      window.addEventListener('hashchange', scrollToHash, false);
    }
  ")
```

## Fields (variables)

```{r}
#| column: page

check_def <- colDef(
  minWidth = 55,
  align = "center",
  html  = TRUE,     # allow htmltools tags
  cell  = function(value) {
    if (identical(value, 1)) {
      htmltools::tags$div(
        style = "display: flex; justify-content: center; align-items: center;",
        htmltools::tags$i(
          class = "fas fa-check",
          style = "font-size: 1.2em; color: green;"
        )
      )
    } else {
      ""  # blank for 0, NA, or anything else
    }
  }
)

fields |> 
  mutate(
    name_merge = if_else(is.na(column_names), name_merge_recent, column_names) |>
      str_replace_all(" yes no", " (Yes/No)") |> 
      str_replace_all(" Yes No", " (Yes/no)"),
  ) |> 
  select(Name = name_merge, Description = description, in_recent) |> 
  left_join(columns_recent, by = c("Name" = "field")) |> 
  select(-in_recent) %>%
  replace_na(list(
    Arrests    = 0,
    Detainers  = 0,
    Encounters = 0,
    Detentions = 0,
    Removals   = 0
  )) |> 
    rename(
    Arr.        = Arrests,
    Dtr.      = Detainers,
    Enc. = Encounters,
    Dtn. = Detentions,
    Rem.   = Removals
    ) |> 
  reactable(
    pagination = FALSE,
    striped    = TRUE,
    searchable = TRUE,
    filterable = TRUE,
    columns = list(
      Arr.    = check_def,
      Dtr.  = check_def,
      Enc. = check_def,
      Dtn. = check_def,
      Rem.   = check_def
    )
  )
```