---
title: "Explore latest ICE arrests data"
page-layout: full
---

```{=html}
<!-- DataTables + Bootstrap 5 styling -->
<!-- jQuery first (needed for $.param) -->
<script src="https://code.jquery.com/jquery-3.7.0.min.js"></script>

<!-- DataTables core library -->
<script src="https://cdn.datatables.net/2.3.2/js/dataTables.min.js"></script>

<!-- DataTables core + Bootstrap 5 styling -->
<link  rel="stylesheet" href="https://cdn.datatables.net/2.3.2/css/dataTables.bootstrap5.min.css">
<script src="https://cdn.datatables.net/2.3.2/js/dataTables.bootstrap5.min.js"></script>

<!-- Buttons: core, then Bootstrap skin -->
<script src="https://cdn.datatables.net/buttons/3.0.1/js/dataTables.buttons.min.js"></script>
<link  rel="stylesheet" href="https://cdn.datatables.net/buttons/3.0.1/css/buttons.bootstrap5.min.css">
<script src="https://cdn.datatables.net/buttons/3.0.1/js/buttons.bootstrap5.min.js"></script>
<script src="https://cdn.datatables.net/buttons/3.0.1/js/buttons.html5.min.js"></script>

<style>
/* Add space between buttons and table */
.dt-buttons {
  margin-bottom: 1rem !important;
}

</style>
```

```{r}
library(tidyverse); library(DT); library(jsonlite); library(glue)

server_url <- "https://ddp-api-4bcgl.ondigitalocean.app"
```

```{r}
# Get just the column names without any data
server_response <- jsonlite::fromJSON(glue("{server_url}/data?start=0&length=1"))
column_names <- names(server_response$data)

# Create a completely empty data frame with just the structure
cols_only <- data.frame(matrix(ncol = length(column_names), nrow = 0))
names(cols_only) <- column_names

datatable(
  cols_only,
  # Remove filter parameter completely
  extensions = "Buttons",
  rownames  = FALSE,
  class     = "table table-striped table-sm",
  options = list(
    dom        = "Brtip",  # Add 'f' back for global search     
    serverSide = TRUE,
    processing = TRUE,
    pageLength = 100,
    ordering = FALSE,
    scrollX = TRUE,  
    ajax       = list(
      url  = glue("{server_url}/data"),
      type = "GET"
    ),
    columns    = lapply(column_names, \(nm) list(data = nm)),

    # Add column search via initComplete that works with scrollX
    initComplete = JS("
      function(settings, json) {
        var api = this.api();
        
        // Create a second header row for filters
        $(api.table().header()).append(
          '<tr class=\"filter-row\">' +
          Array(api.columns().count()).fill('<th class=\"filter-cell\"></th>').join('') +
          '</tr>'
        );
        
        // Add search inputs to each filter cell
        api.columns().every(function(index) {
          var column = this;
          var input = $('<input type=\"text\" class=\"form-control form-control-sm\" placeholder=\"Search...\" />')
            .appendTo($('.filter-row th').eq(index))
            .on('keyup change clear', function() {
              if (column.search() !== this.value) {
                column.search(this.value).draw();
              }
            });
        });
      }
    "),

    buttons = list(
      list(                           # --- label (disabled) ---
        extend     = "csv",           # any valid type is fine
        text       = "Download as",
        className  = "btn btn-sm border-0 bg-transparent pe-none disabled no-outline",
        action     = DT::JS("function(){}")   # do nothing
      ),
      # --- CSV ---
      
      # --- Excel ---
      list(
        extend     = "csv",          # use *any* existing button type; we override action anyway
        text       = "Excel (.xlsx)",
        className  = "btn btn-outline-primary btn-sm me-2",
        action     = DT::JS(glue("
          function (e, dt, node) {{
            var p = dt.ajax.params(); p.start = 0; p.length = -1;
            window.open('{server_url}/download?' + $.param(p) + '&format=xlsx', '_blank');
          }}
        "))
      ),
      
      # --- Stata ---
      list(
        extend     = "csv",          # same ideaâ€”override the default behaviour
        text       = "Stata (.dta)",
        className  = "btn btn-outline-primary btn-sm me-2",
        action     = DT::JS(glue("
          function (e, dt, node) {{
            var p = dt.ajax.params(); p.start = 0; p.length = -1;
            window.open('{server_url}/download?' + $.param(p) + '&format=dta', '_blank');
          }}
        "))
      ),

      list(
        extend     = "csv",
        text       = "R or Python (.feather)",
        className  = "btn btn-outline-primary btn-sm",
        action     = DT::JS(glue("
          function (e, dt, node) {{
            var p = dt.ajax.params(); p.start = 0; p.length = -1;
            window.open('{server_url}/download?' + $.param(p) + '&format=feather', '_blank');
          }}
        "))
      )
    )
    
  )
) |> DT::formatStyle(columns = seq_along(cols_only), `vertical-align`="top", `white-space`="nowrap")
```